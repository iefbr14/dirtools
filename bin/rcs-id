#!/usr/bin/perl -w

=head1 NAME

rcs-id - update rcs-id information

=head1 USAGE

rcs-id -x [args...]

=head1 DESCRIPTION

rcs-id updates a file's rcs information

=head1 AUTHOR, LICENSE and COPYRIGHT

(C) Drew Sullivan 2024 -- LGPL 3.0 or latter

=head1 ITEMS

=over

=item F<$Id:> -- filename revision date time author

=item F<$Source$> -- full path of source

=head1 HISTORY

 (C) 2021 Drew Sullivan -- LGPL 3.0 or latter
 
 $Id rcs-id 1.7.0 2025-Mar-11 13:20:34 drew $
 $Source /u/sync/src/tools/rcs-id$

 Log:
 Version: 0.1 - 2021-Apr-14 -- initial version

=cut

use strict;
use warnings;

use Getopt::Std;
use POSIX qw(strftime);

sub usage {
	die <<"EOF";
Usage: $0 [options...] [args]...
   --
Options:
   -x    -- turn Debugging on.
   -v    -- vebose
EOF
}

my(%Opt);
getopts('xvgmiv', \%Opt) || usage();

my($Debug)   = $Opt{x} || 0;
my($Verbose) = $Opt{v} || 0;

foreach (@ARGV) {
	doid($_);
}

sub doid {
	my($ifile) = @_;
	my($ofile) = "$ifile.tmp.$$";
	my($changed) = 0;

	open(my $ifd, '<', $ifile) || die "Can't open read $ifile ($!)\n";
	open(my $ofd, '>', $ofile) || die "Can't open write $ofile ($!)\n";

	while (<$ifd>) {
		++$changed if substitue($ifile); # do rcs substitution 
		print {$ofd} $_ or die "Write failure on $ofile ($!)\n";
	}
	close($ifd);
	close($ofd);

	unless ($changed) {
		unlink($ofile);
		print "# Unchanged: $ifile\n" if $Verbose;
		return;
	}

	# preserve file permissions
	my($mode) = (stat($ifile))[2] & 07777;
	chmod($mode, $ofile);

	die "$ifile.bak exists.\n", if (-f "$ifile.bak");
	unless (rename($ifile, "$ifile.bak")) {
		die "Save orig: can't rename($ifile, $ifile.bak): $!\n";
	}
	
	unless (rename($ofile, "$ifile")) {
		die "Update orig: Can't rename($ofile, $ifile.bak): $!\n";
	}
	printf "# %d changes: %s\n", $changed, $ifile if $Verbose;
}

my %ID = qw(
Author
Date
Header
Id	    Id: filename revision date time author
Locker
Log
Name
Revision
Source
State
);

sub substitue {
	my($file) = @_;

	my $Re = '\$([A-Z][a-z]+): ?[^\$]*\$';

	return 0 unless /$Re/;		# no rcs-ids

	if (/\$id:/i) {
		my $user = $ENV{LOGNAME};
		my $file = basename($file);
		my $ver = get_version();
		my $date = strftime('%Y-%b-%d %T', localtime());

		s/$Re/\$$1 $file $ver $date $user \$/;
		return 1;
	}

	if (/\$source: /i) {
		my $path = `pwd`; chomp $path; $path .= '/' . $file;

		s/$Re/\$$1 $path\$/;
		return 1;
	}
	die "Unknown RCS tag in $file:$.: $_";

	return 0;
}

sub get_version {
	open(my $fd, '<', 'VERSION') or die;

	my $ver; $ver = <$fd>;
	chomp $ver;
	return $ver;
}

sub basename {
	my($name) = @_;

	$name =~ s=.*/==;
	return $name;
}
